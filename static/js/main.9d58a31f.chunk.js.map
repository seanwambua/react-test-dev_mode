{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Counter","styles","fontSize","fontWeight","console","log","this","props","Fragment","children","style","className","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Component","Counters","onReset","counters","map","key","NavBar","totalCounters","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d58a31f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Counter extends Component {\n  styles = {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  };\n\n  render() {\n    console.log(\"props\", this.props);\n    return (\n      <React.Fragment>\n        {this.props.children}\n        <span style={this.styles} className={this.getBadgeClasses()}>\n          {this.formatCount()}\n        </span>\n\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-primary btn-sm m-2\"\n        >\n          Increment\n        </button>\n\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n        <p></p>\n      </React.Fragment>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nexport default class Counters extends Component {\n  render() {\n    const { onReset, counters, onDelete, onIncrement } = this.props; //destructuring props\n    return (\n      <React.Fragment>\n        <button className=\"btn btn-primary m-2\" onClick={onReset}>\n          Reset\n        </button>\n        {counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            counter={counter}\n          >\n            <h4>Counter {counter.id}</h4>\n          </Counter>\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n","///Stateless Functional Components shortcut 'sfc'\nimport React from \"react\";\n\nconst NavBar = ({ totalCounters }) => {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <span className=\"navbar-brand mb-0 h1\">Dev_Mode</span>\n      <span className=\"badge badge-pill badge-secondary\">\n        Items: {totalCounters}\n      </span>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import \"./App.css\";\nimport Counters from \"./components/counters\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\n\nexport default class App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleIncrement = (counter) => {\n    //console.log(product);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <div className=\"header\">\n          <section className=\"App-header\">\n            <Counters\n              counters={this.state.counters}\n              onReset={this.handleReset}\n              onIncrement={this.handleIncrement}\n              onDelete={this.handleDelete}\n            />\n          </section>\n        </div>\n        <footer>\n          <copyright>Dev_Mode 2021</copyright>\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\n\n/// Changed App to class from function\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}